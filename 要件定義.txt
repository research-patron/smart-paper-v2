# 要件定義書 (修正版)

**1. 概要**

-   **サービス名**: Smart Paper v2

-   **目的**: 研究歴の浅い大学生や大学院生（特に工学、自然科学系）が、英語論文を読む際の障壁を下げ、論文整理の時間を短縮し、研究活動を効率化することを支援する。

-   **ターゲットユーザー**:

    -   工学、自然科学系の大学生、大学院生
    -   英語論文を読むのが苦手な方、論文整理に時間をかけられない方
    -   Obsidian、Zoteroの利用経験は不問（未経験者でも利用可能）
    -   研究室に所属し始めたばかりの学生、論文検索・購読に大学のリソースを利用できる学生 (より具体的なユーザー像)

-   **主要機能**:

    -   PDFアップロード（ファイル選択、ドラッグ＆ドロップ対応、拡張子.pdfのみ、**ファイルサイズ制限: 20MB**）
    -   Gemini 1.5 Flash APIによる論文翻訳（全言語対応、章ごとの翻訳）
        -   参考文献は翻訳対象外（プロンプトで制御）
        -   **翻訳対象**: 本文、図表キャプション、**場合によっては**参考文献 (プロンプトでON/OFF設定可能)
    -   原文と翻訳の見開き表示（左右分割、タブ切り替え可能、**同期スクロール機能**）
    -   翻訳結果のダウンロード（テキストファイル形式、**Markdown形式オプション**）
    -   Obsidian連携（フォルダ設定、ファイル名設定、自動保存、**Obsidian URIスキーム対応**）
    -   Zotero連携 (**DOIがある場合、「Zoteroに論文を登録」ボタンでZoteroに自動登録**, **Zotero Web APIを使用**, **Zotero Connectorの使用を推奨**)
        -   **Zotero APIキーは使用しない**
        -   DOIがない場合は手動登録を促す
        -   **アイテムタイプ選択**
        -   **コレクション指定**
    -   関連論文の自動推薦（Connected Papersなどの外部サービスを利用、アルゴリズム調整・フィルタリング機能あり、**推薦ロジックの説明表示**）
        - **関連度と引用数に基づいて最大15件**
    -   要約の自動生成（カスタマイズ可能、文章形式と箇条書き、**要約の長さ調整機能**、**キーワード抽出機能**)
    -   引用形式の自動生成（ユーザーがCitation Style Language (CSL) から任意のジャーナルを選択可能、デフォルトは翻訳対象論文の掲載ジャーナル、**プレビュー表示**、**BibTeX/RIS形式出力**)
    -   論文のメタデータ抽出・表示 (**手動修正機能**は将来的な拡張)
        -   **章構成の抽出**: プロンプトエンジニアリングで精度向上
    -   会員登録、ログイン機能 (Firebase Authentication 利用、**OAuth連携 (Google)**)
    -   有料サブスクリプション（翻訳数無制限、翻訳済み論文の保存期間延長、関連論文推薦数無制限）
        -   非会員: 翻訳数 1個/日、保存期間 0日、関連論文推薦 利用不可
        -   無料会員: 翻訳数 3個/日、保存期間 3日, 関連論文推薦 3個/日
        -   有料会員: 翻訳数 無制限/日、保存期間 1ヶ月、関連論文推薦 無制限/日
        -   **料金プラン**: 月額300円、年額3,000円
    -   問題報告機能（GitHub連携、アカウントなしでも投稿可能、**FAQページへのリンク**）
    -   アップデート履歴表示（メジャーアップデートのみ、告知しやすいシステム、**詳細なリリースノートへのリンク**）
    -   ホームボタン、お問い合わせボタン
    -   法的文書（利用規約、プライバシーポリシー、免責事項、**特定商取引法に基づく表記**)
    -   **チュートリアル・ヘルプ機能**: サービスの使い方、各機能の説明 (**初回起動時チュートリアル、ヘルプドキュメントへのリンク**)
    -   **多言語対応**: 日本語、英語 (UIの多言語対応)

**2. 機能要件**

-   **2.1 PDFアップロード**:
    -   ユーザーは、PDFファイルをアップロードできる。
    -   ファイル選択ダイアログ、ドラッグ＆ドロップでアップロードできる。
    -   アップロード可能なファイルは、拡張子が.pdfのファイルのみとする。
    -   **ファイルサイズ制限を20MBとする。**
    -   **アップロード進捗表示**: アップロード状況をプログレスバーなどで表示する。
    -   **エラーハンドリング**: ファイルサイズ超過、拡張子エラーなどの場合、適切なエラーメッセージ（ユーモアのある表現）を表示する。

-   **2.2 翻訳**:
    -   Gemini 1.5 Flash APIを使用して、PDFの内容を翻訳する。
        -   **モデル名： gemini-1.5-flash-002**
        -   **コンテキストキャッシュ機能を利用**
            -   **キャッシュ名はファイル名とタイムスタンプを組み合わせたものを使用**
            -   **キャッシュは処理完了後、およびFirebaseのFirestore登録後に削除**
        -   **Python SDK (google-cloud-vertexai) を使用**
            -   **gs://パスを使用してFirebaseのCloud Storage上のPDFを直接読み込み**
    -   全言語の論文に対応する。
    -   論文の章ごとに翻訳を行う。
        -   参考文献は翻訳しない（プロンプトで制御）。 (オプションで翻訳可能)
        -   **メタデータ抽出時に章構成を取得し、その情報に基づいて章ごとの翻訳をCloud Tasksで並列処理する。**
    -   **Cloud Functions (Python) から Cloud Tasks 経由で別の Cloud Functions (Python) を呼び出し、バックグラウンドで翻訳処理を行う。**
    -   **フロントエンドは、Cloud Functions から返されたタスクIDを用いてFirebaseのFirestoreをポーリングし、翻訳の進捗状況を確認する。**
    -   **翻訳完了後、FirebaseのFirestoreから翻訳結果を取得して表示する。**
    -   翻訳結果は、テキストファイル形式、**Markdown形式**でダウンロードできる。
    -   **翻訳進捗表示**: FirebaseのFirestoreをポーリングして進捗表示
    -   **翻訳キャンセル機能**: 翻訳処理を途中でキャンセルできる機能を提供する。
    -   **翻訳エラーハンドリング**: APIエラー、ネットワークエラーなど、翻訳処理中にエラーが発生した場合、適切なエラーメッセージ（ユーモアのある表現）を表示し、再試行を促す。
        -   **エラーメッセージには、エラーの詳細を表示するトグルを設け、詳細なエラーログをダウンロードできるようにする。**
    - **翻訳結果の文字数制限**:
        - 翻訳結果が80万文字を超える場合はFirebaseのCloud Storageに保存。
        - 超えない場合は、FirebaseのFirestoreに保存。

-   **2.3 原文/翻訳表示**:
    -   原文PDFと翻訳結果を左右に並べて表示する。
    -   画面サイズが小さい場合は、タブ切り替えで表示する。
    -   ユーザーは、原文と翻訳の表示/非表示を切り替えられる。
    -   **同期スクロール機能**: 原文と翻訳文を同期してスクロールできる。
    -   **原文PDF表示**: PDF.jsなどのライブラリを用いて、Webブラウザ上でPDFを表示する。
    -   **テキスト選択・コピー**: 原文、翻訳文ともにテキストを選択してコピーできる。
    -   **フォントサイズ調整**: 原文、翻訳文のフォントサイズを調整できる。

-   **2.4 Obsidian連携**:
    -   ユーザーは、Obsidian vaultの保存先フォルダを設定画面で設定できる。
    -   ユーザーは、保存ファイル名の形式を設定できる。（例：著者名_論文タイトル_出版年.txt）
        -   利用可能な変数：著者名、出版年、ジャーナル名、論文タイトル (Gemini APIで抽出)
        -   Gemini APIが情報を抽出できない場合は、取得できている情報のみでファイル名を作成する。
        -   一切取得できていない場合は、ファイルのアップロード日時をファイル名とする。
    -   翻訳結果は、翻訳完了時に自動的にObsidianに保存される。
    -   保存に失敗した場合は、ポップアップでエラーメッセージを表示する。
    -   **Obsidian URIスキーム対応**: Obsidian URIスキームを用いて、Obsidianを直接起動し、指定したVaultとフォルダを開く機能を提供する。
    -   **保存形式**: テキストファイル (.txt) **または Markdownファイル (.md) を選択可能にする。**
    -   **ファイル名フォーマットのプレビュー**: 設定したファイル名フォーマットが実際にどのようにファイル名に反映されるかプレビュー表示する。
    - **Markdown生成はフロントエンドで行う**

-   **2.5 Zotero連携**:
    -   **Zotero Web APIを使用して、翻訳結果をZoteroにエクスポートする。**
        -   DOIがある場合: DOIをZoteroに渡す。
        -   DOIがない場合: ユーザーに手動登録を促すメッセージ（「ごめんなさい！DOIが取得できなかったため、手動で登録してください」）を表示する。
    -   **Zotero Web APIを使用**, **Zotero Connectorの使用を推奨**
    -   **アイテムタイプ選択**: Zoteroに登録する際のアイテムタイプ（ジャーナル論文、書籍、レポートなど）をユーザーが選択できるようにする。
    -   **Zoteroコレクション指定**: Zoteroの特定のコレクションを指定して論文を登録できるようにする。
    -   **エラーハンドリング**: Zotero API連携でエラーが発生した場合、エラーメッセージを詳細に表示し、ユーザーが問題を特定しやすくする。
    -   **Zotero APIキーは使用しない**
    -   **DOIがある場合、「Zoteroに論文を登録」ボタンでZoteroに自動登録**
    -   **Zotero Connectorの使用を推奨**: インストールを促す案内を出す。

-   **2.6 関連論文推薦**:
    -   Connected Papersなどのサービスを利用して、関連論文を推薦する。
    -   ユーザーは、推薦アルゴリズムを調整したり、推薦結果をフィルタリングしたりできる。
    -   **推薦ロジックの説明表示**: どのようなロジックで関連論文が推薦されたのか、簡単に説明を表示する。（例：引用関係、共著関係など）
    -   **推薦結果のカスタマイズ**: ~~推薦件数、出版年範囲などをユーザーが設定できるようにする。~~
    -   **除外キーワード設定**: 推薦結果から特定のキーワードを含む論文を除外できるようにする。
    -   **代替サービス**: Connected Papers以外にも、Semantic Scholar APIなど、複数の関連論文推薦サービスに対応できるよう検討する。
    - **関連度と引用数に基づいて最大15件**

-   **2.7 要約生成**:
    -   Gemini 1.5 Flash APIを使用して、論文の要約を生成する。（プロンプトは後述）
    -   ユーザーは、要約のスタイル（文章形式、箇条書き）を選択できる。
    -   **要約の長さ調整**: 要約の長さを、文字数または段落数で調整できるようにする。
    -   **キーワード抽出**: 論文の主要なキーワードを自動で抽出し、表示する機能を追加する。
    -   **要約プロンプトのカスタマイズ**: より高度なユーザー向けに、要約生成プロンプトをカスタマイズできるオプションを提供する。（JSON形式で設定、プリセットプロンプト選択など）
    -   **多言語要約**: 日本語だけでなく、英語など多言語での要約生成に対応できるよう検討する。

-   **2.8 引用形式生成**:
    -   論文のメタデータから、引用形式を生成する。
    -   ユーザーはCitation Style Language (CSL) から任意のジャーナルを選択できる。
        -   ドロップダウンリストまたは検索可能なリストで提供する。
    -   デフォルトのスタイルは、翻訳対象の論文が掲載されているジャーナルのスタイルとする。
    -   **引用形式のプレビュー表示**: 選択した引用スタイルでどのように引用文献が表示されるかプレビュー表示する。
    -   **BibTeX/RIS形式出力**: 生成した引用情報をBibTeX形式、RIS形式でダウンロードできるようにする。
    -   **引用スタイル検索**: ジャーナル名、スタイル名でCSLスタイルを検索できる機能を提供する。
    -   **主要なCSLスタイルのプリセット**: よく利用される主要なCSLスタイルをプリセットとして用意する。

-   **2.9 メタデータ抽出**:
    -   論文のタイトル、著者、出版年、DOIなどのメタデータを抽出する。
        -   **章構成（章番号、タイトル、開始ページ、終了ページ）も抽出する。**
    -   抽出したメタデータをリスト形式で表示する。
    -   **メタデータ抽出精度の向上**: **今回はGemini 1.5 Flashの精度に依存する**
        -   **プロンプトエンジニアリングにより、抽出精度向上に努める。**
    -   **メタデータ手動修正機能**: ~~抽出されたメタデータをユーザーが手動で修正できるようにする。~~ 将来的な機能拡張
    -   **メタデータ表示項目のカスタマイズ**: 表示するメタデータ項目をユーザーが選択できるようにする。（例：アブストラクト、キーワードなど）
    -   **メタデータJSON/YAML出力**: 抽出したメタデータをJSON形式、YAML形式でダウンロードできるようにする。

-   **2.10 会員登録/ログイン**:
    -   Firebase Authentication を利用して、会員登録・ログイン機能を実装する。
    -   ユーザーは、メールアドレスとパスワードで会員登録できる。
    -   ユーザーは、メールアドレスとパスワードでログインできる。
    -   パスワードリセット機能を実装する。
    -   **OAuth連携**: GoogleなどのOAuthプロバイダとの連携機能を追加し、より簡易なログインを可能にする。
    -   **メールアドレス認証**: 会員登録時にメールアドレス認証を必須とする。
    -   **ログイン状態の保持**: CookieまたはLocalStorageを用いて、ログイン状態を保持する。
    -   **多要素認証**: よりセキュリティを高めるため、多要素認証（MFA）の導入を検討する。（オプション）

-   **2.11 有料サブスクリプション**:
    -   有料会員は、翻訳数無制限、翻訳済み論文の保存期間が延長される。
    -   **料金プラン**: 月額300円、年額3,000円とする。
    -   決済処理は、Stripeを利用する。
    -   **無料トライアル**: 有料プランに加入する前に、一定期間無料トライアルを提供することを検討する。
    -   **プラン比較表**: 非会員、無料会員、有料会員の機能比較表を分かりやすく表示する。
    -   **支払い履歴**: ユーザーが支払い履歴を確認できる機能を提供する。
    -   **領収書発行**: 領収書をダウンロードできるようにする。
    -   **サブスクリプション解約**: ユーザーがWeb上でサブスクリプションを解約できる機能を提供する。

-   **2.12 問題報告**:
    -   GitHubの公開リポジトリに問題を報告できる。（既存サービスの仕組みを流用）
    -   GitHubアカウントを持たないユーザーでも投稿可能。
    -   **FAQページへのリンク**: よくある質問とその回答をまとめたFAQページへのリンクを問題報告画面に設置する。
    -   **問題報告テンプレート**: 問題報告の際に、テンプレート（バグ報告、機能要望など）を選択できるようにする。
    -   **投稿完了メッセージ**: 問題報告投稿後、完了メッセージを表示し、GitHubリポジトリへのリンクを提示する。

-   **2.13 その他**:
    -   ホームボタン
    -   お問い合わせボタン
    -   法的文書
        -   利用規約
        -   プライバシーポリシー
        -   免責事項
        -   **特定商取引法に基づく表記**: 日本の法律に基づき、特定商取引法に基づく表記ページを作成し、フッターなどにリンクを設置する。
    -   アップデート履歴表示（メジャーアップデートのみ、告知しやすいシステム）
        -   **詳細なリリースノートへのリンク**: アップデート履歴から、より詳細なリリースノート（変更点、修正点など）へリンクできるようにする。
    -   **チュートリアル・ヘルプ機能**:
        -   **初回起動時チュートリアル**: サービス初回起動時に、基本的な使い方をステップごとに説明するチュートリアルを表示する。
        -   **ヘルプドキュメントへのリンク**: 各画面にヘルプドキュメントへのリンクを設置し、詳細な機能説明やFAQを提供できるようにする。
    -   **多言語対応**:
        -   **UIの多言語対応**: ユーザーインターフェースを日本語と英語に対応させる。（翻訳APIは全言語対応）
        -   **翻訳対象言語の明示**: 翻訳APIが対応している言語一覧をヘルプドキュメントなどに明示する。

**3. 非機能要件**

-   **3.1 性能**:
    -   翻訳速度: 10ページの論文を**9分以内**に翻訳完了（参考文献を除く）
        -   **Cloud Tasksの導入により、バックグラウンドで処理を行う。**
    -   スケーラビリティ: 将来的なユーザー数、データ量の増加に対応できるよう、拡張性の高い設計とする。
    -   **同時接続数**: ピーク時 **1000ユーザー** 同時接続を想定する。
    -   **レスポンスタイム**: 主要な操作（ページ遷移、ボタンクリックなど）に対して、**2秒以内**にレスポンスを返す。

-   **3.2 セキュリティ**:
    -   Firebase Authentication によるユーザー認証
    -   APIや秘密鍵などの機密情報はGoogle CloudのSecret Manager APIを使用する
        -   **使用するキー**: STRIPE_SECRET_KEY, STRIPE_WEBHOOK_SECRET, Firebase関連キー
        -   **今回、VERTEX_AI_API_KEY, ZOTERO_API_KEY, SEMANTIC_SCHOLAR_API_KEY は使用しない。**
    -   パスワードのハッシュ化保存
    -   セッション管理
    -   データベースに保存する機密情報（パスワードなど）の暗号化
    -   通信経路（HTTPS）の暗号化
    -   SQLインジェクション対策: プレースホルダーの使用、入力値のエスケープ処理
    -   XSS対策: 入力値のエスケープ処理、Content Security Policy (CSP) の設定
    -   定期的な脆弱性診断の実施 (**年2回以上**)
    -   ログの監視 (**24時間体制**)
    -   個人情報保護法などの関連法規に準拠したプライバシーポリシーの策定
    -   **OWASP Top 10 対策**: OWASP Top 10に挙げられている脆弱性への対策を実装する。
    -   **セキュリティポリシー策定**: 情報セキュリティに関するポリシーを策定し、従業員への教育を実施する。

-   **3.3 可用性**:
    -   システムは、原則として24時間365日利用可能とする。
    -   サーバーの冗長化、監視体制については、別途検討する。
        -   **冗長化構成**: AWS Multi-AZ構成などを採用し、可用性を高める。
        -   **監視体制**: Cloud Logging, Cloud Monitoringなどを活用し、24時間365日の監視体制を構築する。
    -   定期メンテナンスの実施方法や、ユーザーへの告知方法（メール、サービス内告知）については、別途検討する。
        -   **メンテナンス時間**: 定期メンテナンスは、**ユーザー利用の少ない時間帯 (例: 深夜)** に実施する。
        -   **告知期間**: メンテナンス実施の**1週間前**までにユーザーへ告知する。
        -   **告知方法**: メール、サービス内告知、SNS (Twitterなど) を併用する。
    -   **SLA (Service Level Agreement) 設定**: 月間稼働率 **99.9%** 以上を目標とするSLAを設定する。
    -   **DR (Disaster Recovery) 対策**: 災害対策、バックアップからの復旧手順を整備する。

-   **3.4 保守性**:
    -   保守しやすいコード、構成とする。（具体的なコード規約、ドキュメントについては別途検討）
        -   **コーディング規約**: Airbnb JavaScript Style Guideなどの既存の規約を参考に、プロジェクト独自のコーディング規約を定める。
        -   **ドキュメント**: APIドキュメント (OpenAPI)、コンポーネントドキュメント (Storybook)、開発・運用手順書など、必要なドキュメントを整備する。
    -   バージョン管理（Git, GitHub）を行う。
    -   **CI/CD**: GitHub Actionsなどを用いたCI/CDパイプラインを構築し、デプロイ作業を自動化する。
    -   **テスト**: 単体テスト、結合テスト、E2Eテストなどを実施し、品質を確保する。
    -   **コードレビュー**: Pull Requestベースでのコードレビューを必須とする。
    -   **モジュール化**: 機能ごとにコンポーネントやモジュールを分割し、疎結合な設計とする。

-   **3.5 拡張性**:
    -   将来的な機能追加に対応できるよう、拡張性の高い設計とする。
    -   **マイクロサービスアーキテクチャ**: バックエンドをマイクロサービスアーキテクチャで構築することを検討する。（初期はモノリシックでも可）
    -   **API Gateway**: API Gatewayを導入し、APIのエンドポイントを一元管理する。
    -   **イベントドリブンアーキテクチャ**: Cloud Pub/Subなどのメッセージキューを用いて、非同期処理を実装し、処理の柔軟性を高める。
    -   **プラグインアーキテクチャ**: 機能追加をプラグインとして実装できるようなアーキテクチャを検討する。（高度な拡張性が必要な場合）

**4. 技術要件**

-   **4.1 フロントエンド**: React (TypeScript)
    -   **UIフレームワーク**: Material-UI (または Ant Design)
    -   **状態管理**: Zustand (または Recoil, Redux Toolkit)
    -   **テスト**: Jest, React Testing Library
    -   **その他ライブラリ**: axios, react-hook-form, date-fns, i18next (多言語対応) など

-   **4.2 バックエンド**:
    -   認証: Firebase Authentication
    -   API: Python + Cloud Functions
    -   データベース: FirebaseのFirestore
    -   ファイルストレージ: FirebaseのCloud Storage

-   **4.3 API**:
    -   Vertex AI (Gemini API)
        -   モデル名： gemini-1.5-flash-002
        -   コンテキストキャッシュ機能を利用
            -   Text/Image/Video Inputs: 100万トークンあたり $0.10
            -   Text Outputs: 100万トークンあたり $0.40
            -   Context Caching: 100万トークンあたり $0.025
            -   キャッシュの有効期限: なし (処理完了後に削除)
        -   Python SDK (google-cloud-vertexai) を使用
            -   gs://パスを使用してFirebaseのCloud Storage上のPDFを直接読み込み
            -   キャッシュIDの生成と管理
    -   Zotero API (**Web API**)
    -   Stripe API (決済処理)
    -   Connected Papers API (または Semantic Scholar API, Research Rabbit API など類似のサービス)
    -   **Cloud Tasks API**

**5. その他**

-   **5.1 法的要件**:
    -   利用規約、プライバシーポリシー、免責事項を作成する。
    -   **特定商取引法に基づく表記ページを作成する。**
    -   **Cookieポリシー**: Cookieの使用に関するポリシーを明記する。
    -   **GDPR, CCPA 考慮**: GDPR (EU一般データ保護規則), CCPA (カリフォルニア州消費者プライバシー法) などの国際的なプライバシー規制を考慮した設計とする。（対象ユーザーによっては必須）

-   **5.2 UI/UX**:
    -   直感的で使いやすいUI/UXとする。
    -   ユーザーがドキュメントなどを参照せずに、サービスを一目見た状態からどう使えばいいのかを理解できるようなデザインにする。
    -   必要に応じて、ガイダンスのようなポップアップを表示してユーザーに操作方法を教える。
    -   **ユーザビリティテスト**: 開発段階でユーザビリティテストを実施し、ユーザーのフィードバックをUI/UXに反映させる。
    -   **アクセシビリティ**: WCAG (Web Content Accessibility Guidelines) 2.1 Level AA に準拠する。
    -   **レスポンシブデザイン**: PC、スマートフォン、タブレットに最適化 (**主要ブラウザ、主要デバイス対応を明記**)
    -   **デザインガイドライン**: UIコンポーネント、カラースキーム、タイポグラフィなどを定義したデザインガイドラインを作成し、一貫性のあるUIを実現する。

-   **5.3 開発要件**:
    -   開発環境｜Mac
    -   インストール条件｜**必要なソフトウェア (Python, Firebase CLIなど) をPCに直接インストールして環境構築を行う。**
    -   プロジェクトの作成｜デスクトップ直下に作成
    -   **開発ツール**: VS Code, GitHubなど
    -   **開発フロー**:
        1.  **フロントエンド/バックエンド開発**:
            -   UI デザイン (Figma など) を基に、React (TypeScript) を用いてフロントエンドを実装。
            -   Pythonを用いてバックエンドを実装
            -   API や秘密鍵などの機密情報は Google Cloud の Secret Manager API を使用して管理する。
            -   単体テスト、結合テスト、E2E テストを実装し、品質を確保する。
        2.  **統合テスト**:
             -   フロントエンドとバックエンドを結合し、システム全体の動作を検証する。
             -   E2E テストを拡充し、ユーザーシナリオに基づいたテストを実施する。
        3.  **デプロイ**:
            -   GitHub Actions などを用いた CI/CD パイプラインを構築し、ステージング環境、本番環境へのデプロイを自動化する。

    -   **知的財産権**: 開発成果物の知的財産権の扱いについて明記する。（著作権の帰属など）

    **環境構築手順**: 詳細は `environment_setup.md` を参照。